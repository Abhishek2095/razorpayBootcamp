// Code generated by MockGen. DO NOT EDIT.
// Source: ecommerce/Order (interfaces: OrderRepository)

// Package mock is a generated GoMock package.
package mock

import (
	Order "ecommerce/Order"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// GetAllOrders mocks base method.
func (m *MockOrderRepository) GetAllOrders(arg0 *[]Order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderRepositoryMockRecorder) GetAllOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetAllOrders), arg0)
}

// GetAllOrdersOfCustomer mocks base method.
func (m *MockOrderRepository) GetAllOrdersOfCustomer(arg0 string, arg1 *[]Order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersOfCustomer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllOrdersOfCustomer indicates an expected call of GetAllOrdersOfCustomer.
func (mr *MockOrderRepositoryMockRecorder) GetAllOrdersOfCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersOfCustomer", reflect.TypeOf((*MockOrderRepository)(nil).GetAllOrdersOfCustomer), arg0, arg1)
}

// GetOrderById mocks base method.
func (m *MockOrderRepository) GetOrderById(arg0 string, arg1 *Order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockOrderRepositoryMockRecorder) GetOrderById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderById), arg0, arg1)
}

// GetOrderCount mocks base method.
func (m *MockOrderRepository) GetOrderCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetOrderCount indicates an expected call of GetOrderCount.
func (mr *MockOrderRepositoryMockRecorder) GetOrderCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderCount", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderCount))
}

// Save mocks base method.
func (m *MockOrderRepository) Save(arg0 *Order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockOrderRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrderRepository)(nil).Save), arg0)
}
