// Code generated by MockGen. DO NOT EDIT.
// Source: ecommerce/Product (interfaces: ProductRepository)

// Package mock is a generated GoMock package.
package mock

import (
	Product "ecommerce/Product"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// GetAllProducts mocks base method.
func (m *MockProductRepository) GetAllProducts(arg0 *[]Product.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductRepositoryMockRecorder) GetAllProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductRepository)(nil).GetAllProducts), arg0)
}

// GetProductById mocks base method.
func (m *MockProductRepository) GetProductById(arg0 string, arg1 *Product.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductRepositoryMockRecorder) GetProductById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductRepository)(nil).GetProductById), arg0, arg1)
}

// GetProductCount mocks base method.
func (m *MockProductRepository) GetProductCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetProductCount indicates an expected call of GetProductCount.
func (mr *MockProductRepositoryMockRecorder) GetProductCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCount", reflect.TypeOf((*MockProductRepository)(nil).GetProductCount))
}

// Save mocks base method.
func (m *MockProductRepository) Save(arg0 *Product.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProductRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProductRepository)(nil).Save), arg0)
}
