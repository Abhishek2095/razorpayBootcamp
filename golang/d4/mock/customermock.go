// Code generated by MockGen. DO NOT EDIT.
// Source: ecommerce/Customer (interfaces: CustomerRepository)

// Package mock is a generated GoMock package.
package mock

import (
	Customer "ecommerce/Customer"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// GetCustomerById mocks base method.
func (m *MockCustomerRepository) GetCustomerById(arg0 string, arg1 *Customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerById), arg0, arg1)
}

// GetCustomerCount mocks base method.
func (m *MockCustomerRepository) GetCustomerCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCustomerCount indicates an expected call of GetCustomerCount.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCount", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerCount))
}

// Save mocks base method.
func (m *MockCustomerRepository) Save(arg0 *Customer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCustomerRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCustomerRepository)(nil).Save), arg0)
}
